// <auto-generated />
using System;
using GeekLifeAPI.Data.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeekLifeAPI.Migrations
{
    [DbContext(typeof(CategoriaContext))]
    [Migration("20230811124748_Migration Zero")]
    partial class MigrationZero
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GeekLifeAPI.Models.CD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Atividade")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("HoraDaCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HoraDaModificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeDoCD")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CDs");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Atividade")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("HoraDaCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HoraDaModificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NomeDaCategoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Altura")
                        .HasColumnType("float");

                    b.Property<bool>("Atividade")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CDId")
                        .HasColumnType("int");

                    b.Property<float>("Comprimento")
                        .HasColumnType("float");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("HoraDaCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HoraDaModificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Largura")
                        .HasColumnType("float");

                    b.Property<string>("NomeDoProduto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.Property<float>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CDId");

                    b.HasIndex("SubId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Sub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Atividade")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraDaCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HoraDaModificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NomeDaSub")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Subs");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Produto", b =>
                {
                    b.HasOne("GeekLifeAPI.Models.CD", "CD")
                        .WithMany("Produtos")
                        .HasForeignKey("CDId");

                    b.HasOne("GeekLifeAPI.Models.Sub", "Sub")
                        .WithMany("Produtos")
                        .HasForeignKey("SubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CD");

                    b.Navigation("Sub");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Sub", b =>
                {
                    b.HasOne("GeekLifeAPI.Models.Categoria", "Categoria")
                        .WithMany("Subs")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.CD", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Categoria", b =>
                {
                    b.Navigation("Subs");
                });

            modelBuilder.Entity("GeekLifeAPI.Models.Sub", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
